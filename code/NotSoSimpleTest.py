import unittest
import Solution
from Utility.ReturnValue import ReturnValue
from Tests.abstractTest import AbstractTest
from Business.Photo import Photo
from Business.RAM import RAM
from Business.Disk import Disk


class Test(AbstractTest):
    def test_Disk_add_get_and_remove(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1, "DELL", 10, 10, 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(2, "DELL", 10, 10, 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(3, "DELL", 10, 10, 10)), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addDisk(Disk(1, "DELL", 10, 10, 10)),
                         "ID 1 ALREADY_EXISTS")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addDisk(Disk(4, "HP", 0, 10, 10)), "Speed 0 is illegal")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addDisk(Disk(0, "HP", 10, 10, 10)), "ID 0 is illegal")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addDisk(Disk(4, "HP", 10, 10, 0)), "Cost 0 is illegal")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addDisk(Disk(4, "HP", 10, -1, 10)), "Free space -1 is illegal")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addDisk(Disk(None, "HP", 10, -1, 10)), "NULL is not allowed")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addDisk(Disk(4, None, 10, 10, 10)), "NULL is not allowed")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addDisk(Disk(4, "HP", None, 10, 10)), "NULL is not allowed")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addDisk(Disk(4, "HP", 10, None, 10)), "NULL is not allowed")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addDisk(Disk(4, "HP", 10, 10, None)), "NULL is not allowed")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(4, "HP", 10, 0, 10)), "Should work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addDisk(Disk(1, "HP", 0, 10, 10)),
                         "BAD_PARAMS has precedence over ALREADY_EXISTS")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addDisk(Disk(1, None, 10, 10, 10)),
                         "BAD_PARAMS has precedence over ALREADY_EXISTS")
        disk = Solution.getDiskByID(2)
        self.assertEqual(disk.getDiskID(), 2, "Should work")
        self.assertEqual(disk.getCompany(), "DELL", "Should work")
        self.assertEqual(disk.getSpeed(), 10, "Should work")
        self.assertEqual(disk.getCost(), 10, "Should work")
        self.assertEqual(disk.getFreeSpace(), 10, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteDisk(4), "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.deleteDisk(4), "ID 4 was already removed")
        Solution.clearTables()
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.deleteDisk(1), "Tables should be empty")
        Solution.dropTables()
        self.assertEqual(ReturnValue.ERROR, Solution.addDisk(Disk(1,"HP",1,1,1)), "Should error")
        self.assertEqual(ReturnValue.ERROR, Solution.deleteDisk(1), "Should error")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getDiskID(), None, "Should return badDisk")
        self.assertEqual(disk.getCompany(), None, "Should return badDisk")
        self.assertEqual(disk.getSpeed(), None, "Should return badDisk")
        self.assertEqual(disk.getCost(), None, "Should return badDisk")
        self.assertEqual(disk.getFreeSpace(), None, "Should return badDisk")
        Solution.createTables()
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1, "DELL", 10, 10, 10)), "Should work")
        self.assertEqual(ReturnValue.OK,Solution.deleteDisk(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1, "HP", 5, 5, 5)), "Re-adding disk 1")


    def test_RAM_add_get_and_remove(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(1, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(2, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(3, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addRAM(RAM(1, "DELL", 10)),
                         "ID 1 ALREADY_EXISTS")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addRAM(RAM(4, "HP", 0)), "Size 0 is illegal")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addRAM(RAM(0, "HP", 10)), "ID 0 is illegal")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addRAM(RAM(None, "HP", 10)), "NULL is not allowed")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addRAM(RAM(4, None, 10)), "NULL is not allowed")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addRAM(RAM(4, "HP", None)), "NULL is not allowed")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(4, "HP", 10)), "Should work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addRAM(RAM(1, "HP", 0)),
                         "BAD_PARAMS has precedence over ALREADY_EXISTS")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addRAM(RAM(1, None, 10)),
                         "BAD_PARAMS has precedence over ALREADY_EXISTS")
        ram = Solution.getRAMByID(2)
        self.assertEqual(ram.getRamID(), 2, "Should work")
        self.assertEqual(ram.getCompany(), "DELL", "Should work")
        self.assertEqual(ram.getSize(), 10, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(4), "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.deleteRAM(4), "ID 4 was already removed")
        Solution.clearTables()
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.deleteRAM(1), "Tables should be empty")
        Solution.dropTables()
        self.assertEqual(ReturnValue.ERROR, Solution.addRAM(RAM(1, "HP", 1)), "Should error")
        self.assertEqual(ReturnValue.ERROR, Solution.deleteRAM(1), "Should error")
        ram = Solution.getRAMByID(1)
        self.assertEqual(ram.getRamID(), None, "Should return badRAM")
        self.assertEqual(ram.getCompany(), None, "Should return badRAM")
        self.assertEqual(ram.getSize(), None, "Should return badRAM")
        Solution.createTables()
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(1, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(1, "HP", 5)), "Re-adding RAM 1")

    def test_Photo_add_get_and_remove(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1, "find minimum value", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2, "find minimum value", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(3, "find minimum value", 10)), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addPhoto(Photo(1, "find minimum value", 10)),
                         "ID 1 ALREADY_EXISTS")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhoto(Photo(4, "find minimum value", -1)),
                         "Size -1 is illegal")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhoto(Photo(0, "find minimum value", 10)),
                         "ID 0 is illegal")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhoto(Photo(None, "find minimum value", 10)),
                         "NULL is not allowed")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhoto(Photo(4, None, 10)), "NULL is not allowed")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhoto(Photo(4, "find minimum value", None)),
                         "NULL is not allowed")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(4, "find minimum value", 0)), "Should work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhoto(Photo(1, "find minimum value", -1)),
                         "BAD_PARAMS has precedence over ALREADY_EXISTS")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhoto(Photo(1, None, 0)),
                         "BAD_PARAMS has precedence over ALREADY_EXISTS")
        photo = Solution.getPhotoByID(2)
        self.assertEqual(photo.getPhotoID(), 2, "Should work")
        self.assertEqual(photo.getDescription(), "find minimum value", "Should work")
        self.assertEqual(photo.getSize(), 10, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(4, "find minimum value", 0)), "Should work")
        Solution.dropTables()
        self.assertEqual(ReturnValue.ERROR, Solution.addPhoto(Photo(1, "HP", 1)), "Should error")
        self.assertEqual(ReturnValue.ERROR, Solution.deletePhoto(Photo(1, "HP", 1)), "Should error")
        photo = Solution.getPhotoByID(1)
        self.assertEqual(photo.getPhotoID(), None, "Should return badPhoto")
        self.assertEqual(photo.getDescription(), None, "Should return badPhoto")
        self.assertEqual(photo.getSize(), None, "Should return badPhoto")
        Solution.createTables()
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(1, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2, "HP", 5)), "Re-adding RAM 1")

    def test_addDiskAndPhoto(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addDiskAndPhoto(Disk(1,"DELL",10,10,10),
                         Photo(1,"stuff",0)), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addDiskAndPhoto(Disk(1,"DELL",10,10,10),
                         Photo(2,"stuff",0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2,"stuff",0)),
                         "Should work because last add should not have worked")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addDiskAndPhoto(Disk(2, "DELL", 10, 10, 10),
                         Photo(2, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.deleteDisk(2),"Disk should not have been added")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getDiskID(), 1, "Should work")
        self.assertEqual(disk.getCompany(), "DELL", "Should work")
        self.assertEqual(disk.getSpeed(), 10, "Should work")
        self.assertEqual(disk.getCost(), 10, "Should work")
        self.assertEqual(disk.getFreeSpace(), 10, "Should work")
        photo = Solution.getPhotoByID(1)
        self.assertEqual(photo.getPhotoID(), 1, "Should work")
        self.assertEqual(photo.getDescription(), "stuff", "Should work")
        self.assertEqual(photo.getSize(), 0, "Should work")
        photo = Solution.getPhotoByID(2)
        self.assertEqual(photo.getPhotoID(), 2, "Should work")
        self.assertEqual(photo.getDescription(), "stuff", "Should work")
        self.assertEqual(photo.getSize(), 0, "Should work")
        Solution.dropTables()
        self.assertEqual(ReturnValue.ERROR, Solution.addDiskAndPhoto(Disk(1, "DELL", 10, 10, 10),
                                                                  Photo(1, "stuff", 0)), "Should error")
        self.assertEqual(ReturnValue.ERROR,Solution.deleteDisk(1), "Should error")
        self.assertEqual(ReturnValue.ERROR,Solution.deletePhoto(Photo(1, "stuff", 0)), "Should error")

    def test_add_and_remove_photo_from_disk(self):
        self.assertEqual(ReturnValue.OK, Solution.addDiskAndPhoto(Disk(1, "DELL", 10, 10, 10),
                         Photo(1, "stuff", 7)), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 10, "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.addPhotoToDisk(Photo(2,"stuff",0),1), "Photo does not exist")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.addPhotoToDisk(Photo(1, "stuff", 7), 2), "Disk does not exist")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 7),1), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 3, "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addPhotoToDisk(Photo(1, "stuff", 7),1),
                         "ALREADY_EXISTS has precedence over BAD_PARAMS")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2, "stuff", 7)), "Should work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhotoToDisk(Photo(2, "stuff", 7),1),
                         "Not enough space on disk")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(3, "stuff", 3)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(3, "stuff", 3), 1), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 0, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(4, "stuff", 7),1),
                         "Photo does not exist, but should still return OK")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(2, "stuff", 7), 1),
                         "Photo is not running on disk, but should still return OK")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(1, "stuff", 7), 2),
                         "Disk does not exist, but should still return OK")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(1, "stuff", 7), 1), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 7, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(3, "stuff", 3), 1), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 10, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(1, "stuff", 7), 1),
                         "Photo is not running on disk, but should still return OK")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(3, "stuff", 3), 1),
                         "Photo is not running on disk, but should still return OK")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 10, "Should work")
        Solution.clearTables()
        self.assertEqual(ReturnValue.OK, Solution.addDiskAndPhoto(Disk(1, "DELL", 10, 10, 10),
                                                                  Photo(1, "stuff", 3)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDiskAndPhoto(Disk(2, "DELL", 10, 10, 10),
                                                                  Photo(2, "stuff", 3)), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 10, "Should work")
        disk = Solution.getDiskByID(2)
        self.assertEqual(disk.getFreeSpace(), 10, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2, "stuff", 3), 1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2, "stuff", 3), 2), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 7, "Should work")
        disk = Solution.getDiskByID(2)
        self.assertEqual(disk.getFreeSpace(), 7, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(2, "stuff", 3)), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 10, "Photo should have been removed from disk")
        disk = Solution.getDiskByID(2)
        self.assertEqual(disk.getFreeSpace(), 10, "Photo should have been removed from disk")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 3), 1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 3), 2), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 7, "Should work")
        disk = Solution.getDiskByID(2)
        self.assertEqual(disk.getFreeSpace(), 7, "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.addPhotoToDisk(Photo(2, "stuff", 3), 1), "Photo doesn't exist")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 7, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(1, "stuff", 3),1), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 10, "Should work")
        disk = Solution.getDiskByID(2)
        self.assertEqual(disk.getFreeSpace(), 7, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(1, "stuff", 3)), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 10, "Photo should have been removed from disk")
        disk = Solution.getDiskByID(2)
        self.assertEqual(disk.getFreeSpace(), 10, "Photo should have been removed from disk")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1,"stuff",3)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 3), 1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 3), 2), "Should work")
        self.assertEqual(ReturnValue.OK,Solution.deleteDisk(1), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), None, "Disk was deleted")
        disk = Solution.getDiskByID(2)
        self.assertEqual(disk.getFreeSpace(), 7, "Disk still has Photo on it")
        Solution.dropTables()
        self.assertEqual(ReturnValue.ERROR, Solution.addPhotoToDisk(Photo(1,"stuff",1),1), "Should error")
        self.assertEqual(ReturnValue.ERROR, Solution.removePhotoFromDisk(Photo(1, "stuff", 1), 1), "Should error")
        Solution.createTables()
        self.assertEqual(ReturnValue.OK, Solution.addDiskAndPhoto(Disk(1, "DELL", 10, 10, 10),
                                                                  Photo(1, "stuff", 7)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 7), 1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(1, "stuff", 7)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1, "stuff", 17)), "Should work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhotoToDisk(Photo(1, "stuff", 17), 1), "Photo too big now")
        self.assertEqual(ReturnValue.OK, Solution.deleteDisk(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1, "DELL", 10, 20, 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 17), 1), "Disk big enough now")

    def test_add_and_remove_ram_from_disk(self):
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1,"DELL",10,10,10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(1, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.addRAMToDisk(1,2), "Disk doesn't exist")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.addRAMToDisk(2,1), "RAM doesn't exist")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1,1), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addRAMToDisk(1, 1), "RAM is already on disk")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.removeRAMFromDisk(1,2), "Disk doesn't exist")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.removeRAMFromDisk(2,1), "RAM doesn't exist")
        self.assertEqual(ReturnValue.OK, Solution.removeRAMFromDisk(1,1), "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.removeRAMFromDisk(1,1), "RAM was already removed")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1, 1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(1), "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.removeRAMFromDisk(1,1),
                         "RAM should have been removed when deleted")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(2, "DELL", 10, 10, 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(1, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(2, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1,1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(2,1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1,2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(2,2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(1), "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.removeRAMFromDisk(1,1),
                         "RAM should have been removed when deleted")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.removeRAMFromDisk(1,2),
                         "RAM should have been removed when deleted")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addRAMToDisk(2,1), "RAM is already on disk")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addRAMToDisk(2,2), "RAM is already on disk")
        self.assertEqual(ReturnValue.OK, Solution.deleteDisk(1), "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.addRAMToDisk(2,1), "Disk was deleted")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addRAMToDisk(2,2), "RAM is already on disk")
        Solution.dropTables()
        self.assertEqual(ReturnValue.ERROR, Solution.addRAMToDisk(1, 1), "Should error")
        self.assertEqual(ReturnValue.ERROR, Solution.removeRAMFromDisk(1, 1), "Should error")

    def test_averagePhotosSizeOnDisk(self):
        self.assertEqual(0, Solution.averagePhotosSizeOnDisk(1), "When disk doesn't exist should return 0")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1,"DELL", 10,15,10)), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 15, "Should work")
        self.assertEqual(0, Solution.averagePhotosSizeOnDisk(1), "When disk has no photos should return 0")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1,"stuff",3)), "Should work")
        self.assertEqual(0, Solution.averagePhotosSizeOnDisk(1), "Disk still has no photos")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1,"stuff",3),1), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 12, "Should work")
        self.assertEqual(3, Solution.averagePhotosSizeOnDisk(1), "Should work")
        self.assertEqual(0, Solution.averagePhotosSizeOnDisk(2), "When disk doesn't exist should return 0")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2, "stuff", 5)), "Should work")
        self.assertEqual(3, Solution.averagePhotosSizeOnDisk(1), "Disk still has 1 Photo of size 3")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2, "stuff", 5), 1), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 7, "Should work")
        self.assertEqual(4, Solution.averagePhotosSizeOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.addPhotoToDisk(Photo(3,"HP",10),1), "Photo doesn't exist")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 7, "Should work")
        self.assertEqual(4, Solution.averagePhotosSizeOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addPhotoToDisk(Photo(2, "stuff", 5), 1),
                         "Photo is already running on disk")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 7, "Should work")
        self.assertEqual(4, Solution.averagePhotosSizeOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(5, "stuff", 10)), "Should work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhotoToDisk(Photo(5, "stuff", 10), 1), "Photo is too big")
        self.assertEqual(4, Solution.averagePhotosSizeOnDisk(1), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 7, "Should work")
        self.assertEqual(ReturnValue.OK,Solution.removePhotoFromDisk(Photo(1,"stuff",3),1), "Should work")
        self.assertEqual(5, Solution.averagePhotosSizeOnDisk(1), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 10, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(2, "stuff", 5)), "Should work")
        self.assertEqual(0, Solution.averagePhotosSizeOnDisk(1), "Photo should have been removed from disk")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 15, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(5, "stuff", 10), 1),"Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 3), 1), "Should work")
        self.assertEqual(6.5, Solution.averagePhotosSizeOnDisk(1), "Should work")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getFreeSpace(), 2, "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteDisk(1), "Should work")
        self.assertEqual(0, Solution.averagePhotosSizeOnDisk(1), "Disk was deleted")
        disk = Solution.getDiskByID(1)
        self.assertEqual(disk.getDiskID(), None, "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.addPhotoToDisk(Photo(1, "stuff", 3), 1), "Disk doesn't exist")
        self.assertEqual(0, Solution.averagePhotosSizeOnDisk(1), "Disk doesn't exist")
        Solution.clearTables()
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1, "DELL", 10, 15, 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(2, "DELL", 10, 15, 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1, "stuff", 3)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2, "stuff", 5)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 3), 1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2, "stuff", 5), 1), "Should work")
        self.assertEqual(4, Solution.averagePhotosSizeOnDisk(1), "Disk 1 has 2 photos of sizes 3 and 5")
        self.assertEqual(0, Solution.averagePhotosSizeOnDisk(2), "Disk 2 still has no photos")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 3), 2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2, "stuff", 5), 2), "Should work")
        self.assertEqual(4, Solution.averagePhotosSizeOnDisk(1), "Disk 1 has 2 photos of sizes 3 and 5")
        self.assertEqual(4, Solution.averagePhotosSizeOnDisk(2), "Disk 2 has 2 photos of sizes 3 and 5")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(1, "stuff", 3), 2), "Should work")
        self.assertEqual(4, Solution.averagePhotosSizeOnDisk(1), "Disk 1 has 2 photos of sizes 3 and 5")
        self.assertEqual(5, Solution.averagePhotosSizeOnDisk(2), "Disk 2 has 1 Photo of size 5")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(2, "stuff", 5)), "Should work")
        self.assertEqual(3, Solution.averagePhotosSizeOnDisk(1), "Disk 1 has 1 Photo of size 3")
        self.assertEqual(0, Solution.averagePhotosSizeOnDisk(2), "Disk 2 has no photos")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 3), 2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteDisk(1), "Should work")
        self.assertEqual(0, Solution.averagePhotosSizeOnDisk(1), "Disk 1 was deleted")
        self.assertEqual(3, Solution.averagePhotosSizeOnDisk(2), "Disk 2 has 1 Photo of size 3")
        Solution.dropTables()
        self.assertEqual(-1, Solution.averagePhotosSizeOnDisk(1), "Should error and return -1")

    def test_getTotalRamOnDisk(self):
        self.assertEqual(0,Solution.getTotalRamOnDisk(1), "Disk doesn't exist, should return 0")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1,"DELL",10,10,10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(1,"DELL",10)),"Should work")
        self.assertEqual(0,Solution.getTotalRamOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.addRAMToDisk(2,1), "RAM doesn't exist")
        self.assertEqual(0, Solution.getTotalRamOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1,1), "Should work")
        self.assertEqual(10, Solution.getTotalRamOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addRAMToDisk(1, 1), "RAM is already connected to disk")
        self.assertEqual(10, Solution.getTotalRamOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.removeRAMFromDisk(2,1), "RAM doesn't exist")
        self.assertEqual(10, Solution.getTotalRamOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(2,"DELL",10)),"Should work")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.removeRAMFromDisk(2, 1), "RAM isn't connected to disk")
        self.assertEqual(10, Solution.getTotalRamOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(2,1), "Should work")
        self.assertEqual(20, Solution.getTotalRamOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.removeRAMFromDisk(1,1),"Should work")
        self.assertEqual(10, Solution.getTotalRamOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(1), "Should work")
        self.assertEqual(10, Solution.getTotalRamOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(2), "Should work")
        self.assertEqual(0, Solution.getTotalRamOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(1, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(2, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1,1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(2,1), "Should work")
        self.assertEqual(20, Solution.getTotalRamOnDisk(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteDisk(1),"Should work")
        self.assertEqual(0, Solution.getTotalRamOnDisk(1), "Disk doesn't exist, should return 0")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(2), "Should work")
        Solution.clearTables()
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1, "DELL", 10, 10, 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(1, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(2, "DELL", 10, 10, 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(2, "DELL", 10)), "Should work")
        self.assertEqual(0, Solution.getTotalRamOnDisk(1), "Disk has no RAM")
        self.assertEqual(0, Solution.getTotalRamOnDisk(2), "Disk has no RAM")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1,1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1,2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(2,1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(2,2), "Should work")
        self.assertEqual(20, Solution.getTotalRamOnDisk(1), "Disk 1 has 2 RAM of size 10 each")
        self.assertEqual(20, Solution.getTotalRamOnDisk(2), "Disk 2 has 2 RAM of size 10 each")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(1), "Should work")
        self.assertEqual(10, Solution.getTotalRamOnDisk(1), "1 RAM should have been removed when deleted")
        self.assertEqual(10, Solution.getTotalRamOnDisk(2), "1 RAM should have been removed when deleted")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(1, "DELL", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1, 1), "Should work")
        self.assertEqual(20, Solution.getTotalRamOnDisk(1), "Disk 1 has 2 RAM of size 10 each")
        self.assertEqual(10, Solution.getTotalRamOnDisk(2), "Disk 2 has 1 RAM of size 10")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(1), "Should work")
        self.assertEqual(10, Solution.getTotalRamOnDisk(1), "1 RAM should have been removed when deleted")
        self.assertEqual(10, Solution.getTotalRamOnDisk(2), "Disk 2 should not have changed")
        self.assertEqual(ReturnValue.OK, Solution.deleteDisk(1), "Should work")
        self.assertEqual(0, Solution.getTotalRamOnDisk(1), "Disk 1 was deleted")
        self.assertEqual(10, Solution.getTotalRamOnDisk(2), "Disk 2 should not have changed")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(2), "Should work")
        Solution.dropTables()
        self.assertEqual(-1, Solution.getTotalRamOnDisk(1), "Should error and return -1")

    def test_getCostForDescription(self):
        self.assertEqual(0,Solution.getCostForDescription("stuff"), "description doesn't exist, should return 0")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1,"stuff", 5)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1,"HP",10,15,10)), "Should work")
        self.assertEqual(0, Solution.getCostForDescription("stuff"), "Photo isn't running")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1,"stuff",5),1), "Should work")
        self.assertEqual(50, Solution.getCostForDescription("stuff"), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2, "stuff", 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(2, "HP", 10, 15, 10)), "Should work")
        self.assertEqual(50, Solution.getCostForDescription("stuff"), "Photo 2 isn't running")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addPhotoToDisk(Photo(1, "stuff", 5), 1),
                         "Photo is already running on disk")
        self.assertEqual(50, Solution.getCostForDescription("stuff"), "Photo 2 isn't running")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2, "stuff", 2), 1), "Should work")
        self.assertEqual(70, Solution.getCostForDescription("stuff"), "2 photos ")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(3, "stuff", 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(3, "stuff", 1), 2), "Should work")
        self.assertEqual(80, Solution.getCostForDescription("stuff"), "3 photos ")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2, "stuff", 2), 2), "Should work")
        self.assertEqual(100, Solution.getCostForDescription("stuff"), "3 photos  (1 is on 2 disks)")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(4, "other stuff", 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(5, "other stuff", 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(4, "other stuff", 1), 1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(4, "other stuff", 1), 2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(5, "other stuff", 1), 2), "Should work")
        self.assertEqual(100, Solution.getCostForDescription("stuff"), "new photos have different description")
        self.assertEqual(30, Solution.getCostForDescription("other stuff"), "new photos")
        disk = Solution.getDiskByID(1)
        self.assertEqual(7, disk.getFreeSpace(), "Should work")
        disk = Solution.getDiskByID(2)
        self.assertEqual(10, disk.getFreeSpace(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(6, "stuff", 10)), "Should work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhotoToDisk(Photo(6, "other stuff", 10), 1),
                         "Photo too big")
        self.assertEqual(100, Solution.getCostForDescription("stuff"), "Photo 6 should not run")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(6, "stuff", 10), 2), "Should work")
        self.assertEqual(200, Solution.getCostForDescription("stuff"), "Photo 6 now running")
        self.assertEqual(30, Solution.getCostForDescription("other stuff"), "Shouldn't have changed")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(4, "other stuff", 1)), "Should work")
        self.assertEqual(200, Solution.getCostForDescription("stuff"), "Shouldn't have changed")
        self.assertEqual(10, Solution.getCostForDescription("other stuff"), "Photo 4 was deleted")
        self.assertEqual(ReturnValue.OK, Solution.deleteDisk(1), "Should work")
        self.assertEqual(130, Solution.getCostForDescription("stuff"), "photos that are on disk 1 should have been removed")
        self.assertEqual(10, Solution.getCostForDescription("other stuff"),
                         "Shouldn't have changed. Disk 1 has no photos with this description")
        Solution.dropTables()
        self.assertEqual(-1, Solution.getCostForDescription("stuff"), "Should error and return -1")

    def test_getPhotosCanBeAddedToDisk(self):
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDisk(1), "Disk doesn't exist. Should return empty list")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1,"HP",10,10,10)),"Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(2,"HP",10,20,10)),"Should work")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDisk(1), "No photos")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDisk(2), "No photos")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1,"stuff",3)), "Should work")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDisk(1), "Photo 1 now available")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDisk(2), "Photo 1 now available")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(3, "stuff", 3)), "Should work")
        self.assertListEqual([3,1], Solution.getPhotosCanBeAddedToDisk(1), "Photo 3 should be first, descending order")
        self.assertListEqual([3,1], Solution.getPhotosCanBeAddedToDisk(2), "Photo 3 should be first, descending order")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2, "stuff", 3)), "Should work")
        self.assertListEqual([3,2,1], Solution.getPhotosCanBeAddedToDisk(1), "Descending")
        self.assertListEqual([3,2,1], Solution.getPhotosCanBeAddedToDisk(2), "Descending")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(4, "stuff", 13)), "Should work")
        self.assertListEqual([3,2,1], Solution.getPhotosCanBeAddedToDisk(1), "Photo 4 is too big for disk 1")
        self.assertListEqual([4,3,2,1], Solution.getPhotosCanBeAddedToDisk(2), "Photo 4 now available")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(5, "stuff", 23)), "Should work")
        self.assertListEqual([3,2,1], Solution.getPhotosCanBeAddedToDisk(1), "Photo 5 is too big for disk 1")
        self.assertListEqual([4,3,2,1], Solution.getPhotosCanBeAddedToDisk(2), "Photo 5 is too big for disk 2")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(8, "other stuff", 3)), "Should work")
        self.assertListEqual([8,3,2,1], Solution.getPhotosCanBeAddedToDisk(1), "Photo 8 now available")
        self.assertListEqual([8,4,3,2,1], Solution.getPhotosCanBeAddedToDisk(2), "Photo 8 now available")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(10, "stuff", 3)), "Should work")
        self.assertListEqual([10,8,3,2,1], Solution.getPhotosCanBeAddedToDisk(1), "Photo 10 now available")
        self.assertListEqual([10,8,4,3,2], Solution.getPhotosCanBeAddedToDisk(2), "Photo 10 now available")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(4, "stuff", 13)), "Should work")
        self.assertListEqual([10,8,3,2,1], Solution.getPhotosCanBeAddedToDisk(1), "Shouldn't change")
        self.assertListEqual([10,8,3,2,1], Solution.getPhotosCanBeAddedToDisk(2), "Photo 4 deleted")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(3, "stuff", 3)), "Should work")
        self.assertListEqual([10,8,2,1], Solution.getPhotosCanBeAddedToDisk(1), "Photo 3 deleted")
        self.assertListEqual([10,8,2,1], Solution.getPhotosCanBeAddedToDisk(2), "Photo 3 deleted")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(15, "stuff", 3)), "Should work")
        self.assertListEqual([15,10,8,2,1], Solution.getPhotosCanBeAddedToDisk(1), "Photo 15 now available")
        self.assertListEqual([15,10,8,2,1], Solution.getPhotosCanBeAddedToDisk(2), "Photo 15 now available")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(20, "stuff", 3)), "Should work")
        self.assertListEqual([20,15,10,8,2], Solution.getPhotosCanBeAddedToDisk(1), "Photo 20 now available")
        self.assertListEqual([20,15,10,8,2], Solution.getPhotosCanBeAddedToDisk(2), "Photo 20 now available")
        self.assertEqual(ReturnValue.OK,Solution.deletePhoto(Photo(10, "stuff", 3)), "Should work")
        self.assertListEqual([20,15,8,2,1], Solution.getPhotosCanBeAddedToDisk(1), "Photo 10 deleted")
        self.assertListEqual([20,15,8,2,1], Solution.getPhotosCanBeAddedToDisk(2), "Photo 10 deleted")
        self.assertEqual(ReturnValue.OK,Solution.deleteDisk(1), "Should work")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDisk(1), "Disk 1 was deleted")
        self.assertListEqual([20,15,8,2,1], Solution.getPhotosCanBeAddedToDisk(2), "Shouldn't change")
        Solution.dropTables()
        self.assertEqual([],Solution.getPhotosCanBeAddedToDisk(1),"Should error and return empty list")

    def test_getPhotosCanBeAddedToDiskAndRAM(self):
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Disk doesn't exist. Should return empty list")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1,"HP",10,10,10)),"Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(2,"HP",10,20,10)),"Should work")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "No photos")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(2), "No photos")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1,"stuff",3)), "Should work")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Disk 1 has no RAM")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(2), "Disk 2 has no RAM")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(1,"HP",10)), "Should work")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Disk 1 has no RAM")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(2), "Disk 2 has no RAM")
        self.assertEqual(ReturnValue.OK,Solution.addRAMToDisk(1,1), "Should work")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Disk 1 now has 10 RAM")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(2), "Disk 2 still has no RAM")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(2, "HP", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(2,1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(2,2), "Should work")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Shouldn't change")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDiskAndRAM(2), "Disk 2 now has 10 RAM")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2, "stuff", 15)), "Should work")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Not enough free space for Photo 2")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDiskAndRAM(2), "Not enough RAM for Photo 2")
        self.assertEqual(ReturnValue.OK, Solution.removeRAMFromDisk(2,2), "Should work")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Shouldn't change")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(2), "Disk 2 now has no RAM")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(2,2), "Should work")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Shouldn't change")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDiskAndRAM(2), "Disk 2 now has 10 RAM")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(2), "Should work")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Disk 1 should still have 10 RAM")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(2), "Disk 2 now has no RAM")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1,2), "Should work")
        self.assertEqual(ReturnValue.OK,Solution.deleteDisk(2), "Should work")
        self.assertListEqual([1], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Shouldn't change")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(2), "Disk 2 was deleted")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(5, "stuff", 3)), "Should work")
        self.assertListEqual([1,5], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Photo 5 available, ascending")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(3, "stuff", 3)), "Should work")
        self.assertListEqual([1,3,5], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Photo 3 available, ascending")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(10, "stuff", 3)), "Should work")
        self.assertListEqual([1,3,5,10], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Photo 10 available")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(20, "stuff", 3)), "Should work")
        self.assertListEqual([1,3,5,10,20], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Photo 20 available")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(15, "stuff", 3)), "Should work")
        self.assertListEqual([1,3,5,10,15], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Max 5")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(15, "stuff", 3)), "Should work")
        self.assertListEqual([1,3,5,10,20], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Photo 15 deleted")
        self.assertEqual(ReturnValue.OK,Solution.addPhotoToDisk(Photo(20, "stuff", 3),1), "Should work")
        self.assertListEqual([1, 3, 5, 10, 20], Solution.getPhotosCanBeAddedToDiskAndRAM(1),
                             "List can include photos already on on disk")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(1), "Should work")
        self.assertListEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Disk 1 now has no RAM")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(7, "stuff", 0)), "Should work")
        self.assertListEqual([7],Solution.getPhotosCanBeAddedToDiskAndRAM(1),
                             "Photo 7 requires no space, so can be added to RAM even if there is no RAM")
        self.assertEqual(ReturnValue.OK, Solution.deleteDisk(1), "Should work")
        self.assertEqual([],Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Disk doesn't exist")
        Solution.dropTables()
        self.assertEqual([], Solution.getPhotosCanBeAddedToDiskAndRAM(1), "Should error and return empty list")

    def test_isCompanyExclusive(self):
        Solution.clearTables()
        self.assertFalse(Solution.isCompanyExclusive(1), "Disk doesn't exist")
        self.assertEqual(ReturnValue.OK,Solution.addDisk(Disk(1,"HP",1,1,1)), "Should work")
        self.assertTrue(Solution.isCompanyExclusive(1), "Disk has no RAM and therefore is company exclusive")
        self.assertEqual(ReturnValue.OK,Solution.addRAM(RAM(1,"DELL",1)),"Should work")
        self.assertTrue(Solution.isCompanyExclusive(1), "RAM isn't connected")
        self.assertEqual(ReturnValue.OK,Solution.addRAMToDisk(1,1),"Should work")
        self.assertFalse(Solution.isCompanyExclusive(1), "Disk from hp has RAM from dell")
        self.assertEqual(ReturnValue.OK,Solution.removeRAMFromDisk(1,1),"Should work")
        self.assertTrue(Solution.isCompanyExclusive(1), "RAM was disconnected")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1, 1), "Should work")
        self.assertEqual(ReturnValue.OK,Solution.deleteRAM(1),"should work")
        self.assertTrue(Solution.isCompanyExclusive(1), "RAM was deleted")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(1,"HP",1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(1,1), "Should work")
        self.assertTrue(Solution.isCompanyExclusive(1), "Disk and RAM are from HP")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(2,"HP",1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(2,1), "Should work")
        self.assertTrue(Solution.isCompanyExclusive(1), "2 RAMs from HP")
        self.assertEqual(ReturnValue.OK, Solution.addRAM(RAM(3,"DELL",1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(3,1), "Should work")
        self.assertFalse(Solution.isCompanyExclusive(1), "Disk from hp with RAM from dell")
        self.assertEqual(ReturnValue.OK,Solution.addDisk(Disk(2,"DELL",1,1,1)),"Should work")
        self.assertFalse(Solution.isCompanyExclusive(1), "Disk 1 from hp with RAM from dell")
        self.assertTrue(Solution.isCompanyExclusive(2), "Disk 2 has no RAM")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(3,2), "Should work")
        self.assertFalse(Solution.isCompanyExclusive(1), "Disk 1 from hp with RAM from dell")
        self.assertTrue(Solution.isCompanyExclusive(2), "Disk 2 from dell with RAM from dell")
        self.assertEqual(ReturnValue.OK, Solution.addRAMToDisk(2,2), "Should work")
        self.assertFalse(Solution.isCompanyExclusive(1), "Disk 1 from hp with RAM from dell")
        self.assertFalse(Solution.isCompanyExclusive(1), "Disk 2 from dell with RAM from hp")
        self.assertEqual(ReturnValue.NOT_EXISTS, Solution.removeRAMFromDisk(1,2), "Should work")
        self.assertFalse(Solution.isCompanyExclusive(1), "Shouldn't change")
        self.assertFalse(Solution.isCompanyExclusive(1), "Shouldn't change")
        self.assertEqual(ReturnValue.OK,Solution.deleteRAM(1),"Should work")
        self.assertFalse(Solution.isCompanyExclusive(1), "Shouldn't change")
        self.assertFalse(Solution.isCompanyExclusive(1), "Shouldn't change")
        self.assertEqual(ReturnValue.OK, Solution.deleteRAM(3), "Should work")
        self.assertTrue(Solution.isCompanyExclusive(1), "RAM from dell was deleted")
        self.assertFalse(Solution.isCompanyExclusive(2), "Still from dell with RAM from hp")
        self.assertEqual(ReturnValue.OK, Solution.deleteDisk(1),"Should work")
        self.assertFalse(Solution.isCompanyExclusive(1), "Disk was deleted")
        self.assertFalse(Solution.isCompanyExclusive(2), "Shouldn't change")
        Solution.dropTables()
        self.assertFalse(Solution.isCompanyExclusive(1), "Should error and return False")

    def test_getConflictingDisks(self):
        self.assertEqual([], Solution.getConflictingDisks(), "No disks available")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1,"HP",1,10,1)),"Should work")
        self.assertEqual([], Solution.getConflictingDisks(), "No conflicting disks")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(2,"HP",1,10,1)), "Should work")
        self.assertEqual([], Solution.getConflictingDisks(), "No conflicting disks")
        self.assertEqual(ReturnValue.OK,Solution.addPhoto(Photo(1,"stuff",2)),"Should work")
        self.assertEqual([], Solution.getConflictingDisks(), "No conflicting disks")
        self.assertEqual(ReturnValue.OK,Solution.addPhotoToDisk(Photo(1,"stuff",2),1), "Should work")
        self.assertEqual([], Solution.getConflictingDisks(), "No conflicting disks")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 2),2), "Should work")
        self.assertEqual([1,2], Solution.getConflictingDisks(), "Disks 1,2 both run Photo 1")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(3, "HP", 1, 10, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 2), 3), "Should work")
        self.assertEqual([1,2,3], Solution.getConflictingDisks(),
                         "Disks 1,2,3 all run Photo 1 and should each appear once in the list")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(4, "HP", 1, 1, 1)), "Should work")
        self.assertEqual([1,2,3], Solution.getConflictingDisks(), "Disk 4 is not conflicting")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPhotoToDisk(Photo(1, "stuff", 2), 4),
                         "Disk 4 doesn't have enough free space")
        self.assertEqual([1,2,3], Solution.getConflictingDisks(), "Shouldn't change")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2,"stuff",1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2,"stuff",1),4),"Should work")
        self.assertEqual([1,2,3], Solution.getConflictingDisks(), "Disk 4 is not conflicting")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2,"stuff",1),2),"Should work")
        self.assertEqual([1,2,3,4], Solution.getConflictingDisks(), "Disk 4 is now conflicting with disk 2")
        self.assertEqual(ReturnValue.OK,Solution.removePhotoFromDisk(Photo(1, "stuff", 2),1),"Should work")
        self.assertEqual([2,3,4], Solution.getConflictingDisks(), "Disk 1 no longer conflicts")
        self.assertEqual(ReturnValue.OK,Solution.deletePhoto(Photo(1, "stuff", 2)),"Should work")
        self.assertEqual([2,4], Solution.getConflictingDisks(),
                         "Disk 3 no longer conflicts due to Photo 1 being deleted")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2,"stuff",1),3), "Should work")
        self.assertEqual([2,3,4], Solution.getConflictingDisks(), "Disk 3 is now conflicting")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(2,"stuff",1),3), "Should work")
        self.assertEqual([2,4], Solution.getConflictingDisks(), "Disk 3 is no longer conflicting")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1,"stuff",5)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1,"stuff",5),3), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1,"stuff",5), 1), "Should work")
        self.assertEqual([1,2,3,4], Solution.getConflictingDisks(),
                         "Disk 1 conflicts with 3 and disk 2 conflicts with 4")
        self.assertEqual(ReturnValue.OK,Solution.deleteDisk(1),"Should work")
        self.assertEqual([2,4], Solution.getConflictingDisks(),
                         "Disk 1 deleted, therefore Disk 3 is no longer conflicting")
        Solution.dropTables()
        self.assertEqual([],Solution.getConflictingDisks(),"Should error and return empty list")

    def test_mostAvailableDisks(self):
        Solution.clearTables()
        self.assertListEqual([],Solution.mostAvailableDisks(),"No disks")
        self.assertEqual(ReturnValue.OK,Solution.addDisk(Disk(1,"HP",1,1,1)),"Should work")
        # self.assertListEqual([1],Solution.mostAvailableDisks(),"Can have 0 photos") # w8 for piazza answer on this case: should it return empty list("if and only if" condition is false) or list containing disk 1
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(5, "HP", 1, 4, 1)), "Should work")
        # self.assertListEqual([1,5], Solution.mostAvailableDisks(), "ascending")  #w8 for piazza answer on this case
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(3, "HP", 1, 10, 1)), "Should work")
        self.assertListEqual([1,3,5], Solution.mostAvailableDisks(), "ascending")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(2, "HP", 5, 2, 1)), "Should work")
        self.assertListEqual([2, 1, 3, 5], Solution.mostAvailableDisks(), "Disk 2 is faster")
        self.assertEqual(ReturnValue.OK,Solution.addPhoto(Photo(1,"stuff",10)),"Should work")
        self.assertListEqual([3, 2, 1, 5], Solution.mostAvailableDisks(), "Disk 3 is the only one who can have Photo 1")
        self.assertEqual(ReturnValue.OK,Solution.addPhotoToDisk(Photo(1,"stuff",10),3),"Should work")
        self.assertListEqual([2, 1, 3, 5], Solution.mostAvailableDisks(), "Disk 3 is full")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2, "stuff", 1)), "Should work")
        self.assertListEqual([2, 1, 5, 3], Solution.mostAvailableDisks(), "All disks other than 3 can have Photo 2")
        self.assertEqual(ReturnValue.OK,Solution.removePhotoFromDisk(Photo(1,"stuff",10),3),"should work")
        self.assertListEqual([3, 2, 1, 5], Solution.mostAvailableDisks(), "Disk 3 can have both photos")
        self.assertEqual(ReturnValue.OK,Solution.deletePhoto(Photo(1,"stuff",10)),"Should work")
        self.assertListEqual([2, 1, 3, 5], Solution.mostAvailableDisks(), "All disks can have Photo 1")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1, "stuff", 10)), "Should work")
        self.assertListEqual([3, 2, 1, 5], Solution.mostAvailableDisks(), "Disk 3 can have both photos")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 10), 3), "Should work")
        self.assertListEqual([2, 1, 5, 3], Solution.mostAvailableDisks(),
                             "Disk 3 can't run Photo 1 again (not enough space")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(1, "stuff", 10)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deletePhoto(Photo(2, "stuff", 1)), "Should work")
        self.assertListEqual([2, 1, 3, 5], Solution.mostAvailableDisks(), "No photos")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(5, "stuff", 2)), "Should work")
        self.assertListEqual([2, 3, 5, 1], Solution.mostAvailableDisks(), "Disk 1 can't run Photo 5")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(5, "stuff", 2), 2), "Should work")
        self.assertListEqual([3, 5, 2, 1], Solution.mostAvailableDisks(),
                             "Disk 2 is full, but disk 1 can't have any photos either and is slower")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(5, "stuff", 2), 5), "Should work")
        self.assertListEqual([3, 5, 2, 1], Solution.mostAvailableDisks(),
                             "Disk 5 still has enough space to run the Photo again")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(5, "stuff", 2), 2), "should work")
        self.assertListEqual([2, 3, 5, 1], Solution.mostAvailableDisks(), "Disk 1 can't run Photo 5")
        self.assertEqual(ReturnValue.NOT_EXISTS,Solution.addPhotoToDisk(Photo(10,"stuff",2),2),"No such Photo")
        self.assertListEqual([2, 3, 5, 1], Solution.mostAvailableDisks(), "Shouldn't change")
        Solution.clearTables()
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(1, "HP", 1, 1, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(2, "HP", 1, 1, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(3, "HP", 1, 1, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(4, "HP", 1, 1, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(5, "HP", 1, 1, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(6, "HP", 1, 1, 1)), "Should work")
        self.assertListEqual([1,2,3,4,5], Solution.mostAvailableDisks(), "Max 5 disks")
        Solution.dropTables()
        self.assertListEqual([], Solution.mostAvailableDisks(), "Should error and return empty list")

    def test_getClosePhotos(self):
        self.assertEqual(ReturnValue.OK,Solution.addPhoto(Photo(1,"stuff",0)),"Should work")
        self.assertListEqual([], Solution.getClosePhotos(1), "Photo can't be close to itself")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2, "stuff", 0)), "Should work")
        self.assertListEqual([2],Solution.getClosePhotos(1),"Close in an empty sense")
        self.assertListEqual([1], Solution.getClosePhotos(2), "Close in an empty sense")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(3, "stuff", 0)), "Should work")
        self.assertListEqual([2,3], Solution.getClosePhotos(1), "Close in an empty sense")
        self.assertListEqual([1,3], Solution.getClosePhotos(2), "Close in an empty sense")
        self.assertListEqual([1,2], Solution.getClosePhotos(3), "Close in an empty sense")
        self.assertEqual(ReturnValue.OK,Solution.addDisk(Disk(1,"HP",1,1,1)),"Should work")
        self.assertListEqual([2, 3], Solution.getClosePhotos(1), "Shouldn't change")
        self.assertListEqual([1, 3], Solution.getClosePhotos(2), "Shouldn't change")
        self.assertListEqual([1, 2], Solution.getClosePhotos(3), "Shouldn't change")
        self.assertEqual(ReturnValue.OK,Solution.addPhotoToDisk(Photo(1,"stuff",0),1),"Should work")
        self.assertListEqual([], Solution.getClosePhotos(1), "Can't be Close in an empty sense any more")
        self.assertListEqual([1,3], Solution.getClosePhotos(2), "Still close in an empty sense")
        self.assertListEqual([1,2], Solution.getClosePhotos(3), "Still close in an empty sense")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2, "stuff", 0), 1), "Should work")
        self.assertListEqual([2], Solution.getClosePhotos(1), "photos 1 and 2 run on same disk")
        self.assertListEqual([1], Solution.getClosePhotos(2), "photos 1 and 2 run on same disk")
        self.assertListEqual([1, 2], Solution.getClosePhotos(3), "Still close in an empty sense")
        self.assertEqual(ReturnValue.OK,Solution.addDisk(Disk(2,"HP",1,1,1)),"Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(3, "stuff", 0), 2), "Should work")
        self.assertListEqual([2], Solution.getClosePhotos(1), "Shouldn't change")
        self.assertListEqual([1], Solution.getClosePhotos(2), "Shouldn't change")
        self.assertListEqual([], Solution.getClosePhotos(3), "Can't be Close in an empty sense any more")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(3, "stuff", 0), 1), "Should work")
        self.assertListEqual([2, 3], Solution.getClosePhotos(1), "Everyone is running on disk 1")
        self.assertListEqual([1, 3], Solution.getClosePhotos(2), "Everyone is running on disk 1")
        self.assertListEqual([1, 2], Solution.getClosePhotos(3), "Everyone is running on disk 1, which is 50%")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(3, "HP", 1, 1, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(3, "stuff", 0), 3), "Should work")
        self.assertListEqual([2, 3], Solution.getClosePhotos(1), "Shouldn't change")
        self.assertListEqual([1, 3], Solution.getClosePhotos(2), "Shouldn't change")
        self.assertListEqual([], Solution.getClosePhotos(3), "Not 50% any more")
        self.assertEqual(ReturnValue.OK, Solution.addDisk(Disk(4, "HP", 1, 1, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(3, "stuff", 0), 4), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2, "stuff", 0), 2), "Should work")
        self.assertListEqual([2, 3], Solution.getClosePhotos(1), "Everyone is running on disk 1")
        self.assertListEqual([1, 3], Solution.getClosePhotos(2), "Everyone is running on disk 1, which is 50%")
        self.assertListEqual([2], Solution.getClosePhotos(3), "Exactly 50%")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(1, "stuff", 0), 4), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhotoToDisk(Photo(2, "stuff", 0), 4), "Should work")
        self.assertListEqual([1,2], Solution.getClosePhotos(3), "2 is closer but should be ordered by id")
        self.assertEqual(ReturnValue.OK,Solution.deleteDisk(4),"Should work")
        self.assertListEqual([2,3], Solution.getClosePhotos(1), "Everyone is running on disk 1")
        self.assertListEqual([1,3], Solution.getClosePhotos(2), "Everyone is running on disk 1, which is 50%")
        self.assertListEqual([2], Solution.getClosePhotos(3), "2 is running on 2 and 3")
        self.assertEqual(ReturnValue.OK,Solution.deletePhoto(Photo(2, "stuff", 0)),"Should work")
        self.assertListEqual([3], Solution.getClosePhotos(1), "Photo 2 deleted")
        self.assertListEqual([], Solution.getClosePhotos(3), "Photo 2 deleted")
        self.assertEqual(ReturnValue.OK, Solution.removePhotoFromDisk(Photo(3, "stuff", 0), 2), "Should work")
        self.assertListEqual([3], Solution.getClosePhotos(1), "Shouldn't change")
        self.assertListEqual([1], Solution.getClosePhotos(3), "1 is now close")
        Solution.clearTables()
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(1, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(12, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(8, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(54, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(9, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(2, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(23, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(7, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(10, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(11, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(3, "stuff", 0)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPhoto(Photo(15, "stuff", 0)), "Should work")
        self.assertListEqual([1, 2, 7, 8, 9, 10, 11, 12, 15, 23], Solution.getClosePhotos(3),
                             "Max 10, should not include 3 itself")


# *** DO NOT RUN EACH TEST MANUALLY ***
if __name__ == '__main__':
    unittest.main(verbosity=2, exit=False)
